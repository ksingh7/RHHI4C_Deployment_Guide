heat_template_version: pike

description: >
  OpenStack Octavia service configured with Puppet

parameters:
  DockerOctaviaApiImage:
    description: image
    type: string
  DockerOctaviaConfigImage:
    description: The container image to use for the octavia config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EnableInternalTLS:
    type: boolean
    default: false

conditions:

  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}


resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  OctaviaApiPuppetBase:
    type: ../../puppet/services/octavia-api.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Octavia API role.
    value:
      service_name: {get_attr: [OctaviaApiPuppetBase, role_data, service_name]}
      config_settings: {get_attr: [OctaviaApiPuppetBase, role_data, config_settings]}
      logging_source: {get_attr: [OctaviaApiPuppetBase, role_data, logging_source]}
      logging_groups: {get_attr: [OctaviaApiPuppetBase, role_data, logging_groups]}
      step_config: &step_config
        list_join:
          - "\n"
          - - {get_attr: [OctaviaApiPuppetBase, role_data, step_config]}
            - {get_attr: [MySQLClient, role_data, step_config]}
      service_config_settings: {get_attr: [OctaviaApiPuppetBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS #
      puppet_config:
        config_volume: octavia
        puppet_tags: octavia_config
        step_config: *step_config
        config_image: {get_param: DockerOctaviaConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/octavia_api.json:
          command: /usr/bin/octavia-api --config-file /usr/share/octavia/octavia-dist.conf --config-file /etc/octavia/octavia.conf --log-file /var/log/octavia/api.log --config-dir /etc/octavia/conf.d/common --config-dir /etc/octavia/conf.d/octavia-api
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
        /var/lib/kolla/config_files/octavia_api_tls_proxy.json:
          command: /usr/sbin/httpd -DFOREGROUND
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
      docker_config:
        # Kolla_bootstrap/db_sync runs before permissions set by kolla_config
        step_2:
          octavia_api_init_dirs:
            start_order: 0
            image: &octavia_api_image {get_param: DockerOctaviaApiImage}
            user: root
            volumes:
              # NOTE(mandre) we need extra dir for the service in /etc/octavia/conf.d
              # It is normally created as part of the RPM install, but it is
              # missing here because we use the same config_volume for all
              # octavia services, hence the same container image to generate
              # configuration.
              - /var/lib/config-data/puppet-generated/octavia/etc/octavia:/etc/octavia/
              - /var/log/containers/octavia:/var/log/octavia
              - /var/log/containers/httpd/octavia-api:/var/log/httpd
            command: ['/bin/bash', '-c', 'mkdir -p /etc/octavia/conf.d/octavia-api; chown -R octavia:octavia /etc/octavia/conf.d/octavia-api; chown -R octavia:octavia /var/log/octavia']
        step_3:
          octavia_db_sync:
            start_order: 0
            image: *octavia_api_image
            net: host
            privileged: false
            detach: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/octavia/etc/octavia/:/etc/octavia/:ro
                  - /var/log/containers/octavia:/var/log/octavia
                  - /var/log/containers/httpd/octavia-api:/var/log/httpd
            command: "/usr/bin/bootstrap_host_exec octavia_api su octavia -s /bin/bash -c '/usr/bin/octavia-db-manage upgrade head'"
        step_4:
          map_merge:
            - octavia_api:
                start_order: 2
                image: *octavia_api_image
                net: host
                privileged: false
                restart: always
                volumes:
                  list_concat:
                    - {get_attr: [ContainersCommon, volumes]}
                    -
                      - /var/lib/kolla/config_files/octavia_api.json:/var/lib/kolla/config_files/config.json:ro
                      - /var/lib/config-data/puppet-generated/octavia/:/var/lib/kolla/config_files/src:ro
                      - /var/log/containers/octavia:/var/log/octavia
                      - /var/log/containers/httpd/octavia-api:/var/log/httpd
                environment:
                  - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
            - if:
                - internal_tls_enabled
                - octavia_api_tls_proxy:
                    start_order: 2
                    image: *octavia_api_image
                    net: host
                    user: root
                    restart: always
                    volumes:
                      list_concat:
                        - {get_attr: [ContainersCommon, volumes]}
                        -
                          - /var/lib/kolla/config_files/octavia_api_tls_proxy.json:/var/lib/kolla/config_files/config.json:ro
                          - /var/lib/config-data/puppet-generated/octavia/:/var/lib/kolla/config_files/src:ro
                          - /etc/pki/tls/certs/httpd:/etc/pki/tls/certs/httpd:ro
                          - /etc/pki/tls/private/httpd:/etc/pki/tls/private/httpd:ro
                    environment:
                      - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
                - {}
      host_prep_tasks:
        - name: create persistent logs directory
          file:
            path: "{{ item }}"
            state: directory
          with_items:
            - /var/log/containers/octavia
            - /var/log/containers/httpd/octavia-api
      upgrade_tasks:
        - name: Stop and disable octavia_api service
          tags: step2
          service: name=openstack-octavia-api state=stopped enabled=no
