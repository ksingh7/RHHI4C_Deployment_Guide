heat_template_version: pike

description: >
  OpenStack containerized Mistral API service

parameters:
  DockerMistralApiImage:
    description: image
    type: string
  DockerMistralConfigImage:
    description: The container image to use for the mistral config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  MistralWorkers:
    default: 1
    description: The number of workers for the mistral-api.
    type: number
  MistralApiPolicies:
    description: |
      A hash of policies to configure for Mistral API.
      e.g. { mistral-context_is_admin: { key: context_is_admin, value: 'role:admin' } }
    default: {}
    type: json

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  MistralBase:
    type: ../../puppet/services/mistral-base.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

  MistralApiBase:
    type: ../../puppet/services/mistral-api.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Mistral API role.
    value:
      service_name: {get_attr: [MistralApiBase, role_data, service_name]}
      # FIXME(mandre) restore once mistral-api image has the necessary packages
      # to run on top of apache
      # config_settings:
      #   map_merge:
      #     - get_attr: [MistralApiBase, role_data, config_settings]
      config_settings:
        map_merge:
          - get_attr: [MistralBase, role_data, config_settings]
          - mistral::api::api_workers: {get_param: MistralWorkers}
            mistral::api::bind_host: {get_param: [ServiceNetMap, MistralApiNetwork]}
            mistral::policy::policies: {get_param: MistralApiPolicies}
            tripleo.mistral_api.firewall_rules:
              '133 mistral':
                dport:
                  - 8989
                  - 13989
            mistral_wsgi_enabled: false
      logging_source: {get_attr: [MistralApiBase, role_data, logging_source]}
      logging_groups: {get_attr: [MistralApiBase, role_data, logging_groups]}
      step_config: &step_config
        list_join:
          - "\n"
          - - {get_attr: [MistralApiBase, role_data, step_config]}
            - {get_attr: [MySQLClient, role_data, step_config]}
      service_config_settings: {get_attr: [MistralApiBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: mistral
        puppet_tags: mistral_config
        step_config: *step_config
        config_image: {get_param: DockerMistralConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/mistral_api.json:
          command: /usr/bin/mistral-server --config-file=/etc/mistral/mistral.conf --log-file=/var/log/mistral/api.log --server=api
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/mistral
              owner: mistral:mistral
              recurse: true
      docker_config:
        # db sync runs before permissions set by kolla_config
        step_2:
          mistral_init_logs:
            image: &mistral_api_image {get_param: DockerMistralApiImage}
            privileged: false
            user: root
            volumes:
              - /var/log/containers/mistral:/var/log/mistral
            command: ['/bin/bash', '-c', 'chown -R mistral:mistral /var/log/mistral']
        step_3:
          mistral_db_sync:
            start_order: 0
            image: *mistral_api_image
            net: host
            privileged: false
            detach: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/mistral/etc/mistral/:/etc/mistral/:ro
                  - /var/log/containers/mistral:/var/log/mistral
            command: "/usr/bin/bootstrap_host_exec mistral_api su mistral -s /bin/bash -c 'mistral-db-manage --config-file /etc/mistral/mistral.conf upgrade head'"
          mistral_db_populate:
            start_order: 1
            image: *mistral_api_image
            net: host
            privileged: false
            detach: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/mistral/etc/mistral/:/etc/mistral/:ro
                  - /var/log/containers/mistral:/var/log/mistral
            # NOTE: dprince this requires that we install openstack-tripleo-common into
            # the Mistral API image so that we get tripleo* actions
            command: "/usr/bin/bootstrap_host_exec mistral_api su mistral -s /bin/bash -c 'mistral-db-manage --config-file /etc/mistral/mistral.conf populate'"
        step_4:
          mistral_api:
            start_order: 15
            image: *mistral_api_image
            net: host
            privileged: false
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/mistral_api.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/mistral/:/var/lib/kolla/config_files/src:ro
                  - /var/log/containers/mistral:/var/log/mistral
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
        - name: create persistent logs directory
          file:
            path: /var/log/containers/mistral
            state: directory
      upgrade_tasks:
        - name: Stop and disable mistral_api service
          tags: step2
          service: name=openstack-mistral-api state=stopped enabled=no
