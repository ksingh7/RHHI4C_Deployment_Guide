heat_template_version: pike

description: >
  OpenStack containerized Heat Engine service

parameters:
  DockerHeatEngineImage:
    description: image
    type: string
  DockerHeatConfigImage:
    description: The container image to use for the heat config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  HeatBase:
    type: ../../puppet/services/heat-engine.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Heat Engine role.
    value:
      service_name: {get_attr: [HeatBase, role_data, service_name]}
      config_settings:
        map_merge:
          - get_attr: [HeatBase, role_data, config_settings]
          - apache::default_vhost: false
      logging_source: {get_attr: [HeatBase, role_data, logging_source]}
      logging_groups: {get_attr: [HeatBase, role_data, logging_groups]}
      step_config: &step_config
        list_join:
          - "\n"
          - - {get_attr: [HeatBase, role_data, step_config]}
            - {get_attr: [MySQLClient, role_data, step_config]}
      service_config_settings: {get_attr: [HeatBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: heat
        puppet_tags: heat_config,file,concat,file_line
        step_config: *step_config
        config_image: {get_param: DockerHeatConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/heat_engine.json:
          command: /usr/bin/heat-engine --config-file /usr/share/heat/heat-dist.conf --config-file /etc/heat/heat.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/heat
              owner: heat:heat
              recurse: true
      docker_config:
        # db sync runs before permissions set by kolla_config
        step_2:
          heat_init_log:
            image: &heat_engine_image {get_param: DockerHeatEngineImage}
            user: root
            volumes:
              - /var/log/containers/heat:/var/log/heat
            command: ['/bin/bash', '-c', 'chown -R heat:heat /var/log/heat']
        step_3:
          heat_engine_db_sync:
            image: *heat_engine_image
            net: host
            privileged: false
            detach: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/heat/etc/my.cnf.d/tripleo.cnf:/etc/my.cnf.d/tripleo.cnf:ro
                  - /var/lib/config-data/heat/etc/heat/:/etc/heat/:ro
                  - /var/log/containers/heat:/var/log/heat
            command: "/usr/bin/bootstrap_host_exec heat_engine su heat -s /bin/bash -c 'heat-manage db_sync'"
        step_4:
          heat_engine:
            image: *heat_engine_image
            net: host
            privileged: false
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/heat_engine.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/heat/:/var/lib/kolla/config_files/src:ro
                  - /var/log/containers/heat:/var/log/heat
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
        - name: create persistent logs directory
          file:
            path: /var/log/containers/heat
            state: directory
      upgrade_tasks:
        - name: Stop and disable heat_engine service
          tags: step2
          service: name=openstack-heat-engine state=stopped enabled=no
