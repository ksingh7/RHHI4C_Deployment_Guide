heat_template_version: pike

description: >
  OpenStack Sahara service configured with Puppet

parameters:
  DockerSaharaApiImage:
    description: image
    type: string
  DockerSaharaConfigImage:
    description: The container image to use for the sahara config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  SaharaApiPuppetBase:
    type: ../../puppet/services/sahara-api.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}

outputs:
  role_data:
    description: Role data for the Sahara API role.
    value:
      service_name: {get_attr: [SaharaApiPuppetBase, role_data, service_name]}
      config_settings:
        map_merge:
          - get_attr: [SaharaApiPuppetBase, role_data, config_settings]
          - sahara::sync_db: false
      logging_source: {get_attr: [SaharaApiPuppetBase, role_data, logging_source]}
      logging_groups: {get_attr: [SaharaApiPuppetBase, role_data, logging_groups]}
      step_config: &step_config
        list_join:
          - "\n"
          - - {get_attr: [SaharaApiPuppetBase, role_data, step_config]}
            - {get_attr: [MySQLClient, role_data, step_config]}
      service_config_settings: {get_attr: [SaharaApiPuppetBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS #
      puppet_config:
        config_volume: sahara
        puppet_tags: sahara_api_paste_ini,sahara_cluster_template,sahara_config,sahara_node_group_template
        step_config: *step_config
        config_image: {get_param: DockerSaharaConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/sahara-api.json:
          command: /usr/bin/sahara-api --config-file /etc/sahara/sahara.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/lib/sahara
              owner: sahara:sahara
              recurse: true
            - path: /var/log/sahara
              owner: sahara:sahara
              recurse: true
      docker_config:
        step_3:
          sahara_db_sync:
            image: &sahara_api_image {get_param: DockerSaharaApiImage}
            net: host
            privileged: false
            detach: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/sahara/etc/sahara/:/etc/sahara/:ro
                  - /lib/modules:/lib/modules:ro
                  - /var/lib/sahara:/var/lib/sahara
                  - /var/log/containers/sahara:/var/log/sahara
            command: "/usr/bin/bootstrap_host_exec sahara_api su sahara -s /bin/bash -c 'sahara-db-manage --config-file /etc/sahara/sahara.conf upgrade head'"
        step_4:
          sahara_api:
            image: *sahara_api_image
            net: host
            privileged: false
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/sahara-api.json:/var/lib/kolla/config_files/config.json
                  - /var/lib/config-data/puppet-generated/sahara/:/var/lib/kolla/config_files/src:ro
                  - /lib/modules:/lib/modules:ro
                  - /var/lib/sahara:/var/lib/sahara
                  - /var/log/containers/sahara:/var/log/sahara
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
        - name: create /var/lib/sahara
          file:
            path: /var/lib/sahara
            state: directory
        - name: create persistent sahara logs directory
          file:
            path: /var/log/containers/sahara
            state: directory
      upgrade_tasks:
        - name: Stop and disable sahara_api service
          tags: step2
          service: name=openstack-sahara-api state=stopped enabled=no
        - name: Remove openstack-sahara-api package if operator requests it
          yum: name=openstack-sahara-api state=removed
          tags: step2
          ignore_errors: True
          when: {get_param: UpgradeRemoveUnusedPackages}
