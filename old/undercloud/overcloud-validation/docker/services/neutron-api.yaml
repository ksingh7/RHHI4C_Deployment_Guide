heat_template_version: pike

description: >
  OpenStack containerized Neutron API service

parameters:
  DockerNeutronApiImage:
    description: image
    type: string
  DockerNeutronConfigImage:
    description: The container image to use for the neutron config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EnableInternalTLS:
    type: boolean
    default: false
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean

conditions:

  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  NeutronBase:
    type: ../../puppet/services/neutron-api.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Neutron API role.
    value:
      service_name: {get_attr: [NeutronBase, role_data, service_name]}
      logging_source: {get_attr: [NeutronBase, role_data, logging_source]}
      logging_groups: {get_attr: [NeutronBase, role_data, logging_groups]}
      config_settings:
        map_merge:
          - get_attr: [NeutronBase, role_data, config_settings]
      step_config: &step_config
        list_join:
          - "\n"
          - - {get_attr: [NeutronBase, role_data, step_config]}
            - {get_attr: [MySQLClient, role_data, step_config]}
      service_config_settings: {get_attr: [NeutronBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: neutron
        puppet_tags: neutron_config,neutron_api_config
        step_config: *step_config
        config_image: {get_param: DockerNeutronConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/neutron_api.json:
          command: /usr/bin/neutron-server --config-file /usr/share/neutron/neutron-dist.conf --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugin.ini --config-dir /etc/neutron/conf.d/common --config-dir /etc/neutron/conf.d/neutron-server
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/neutron
              owner: neutron:neutron
              recurse: true
        /var/lib/kolla/config_files/neutron_server_tls_proxy.json:
          command: /usr/sbin/httpd -DFOREGROUND
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
      docker_config:
        # db sync runs before permissions set by kolla_config
        step_2:
          neutron_init_logs:
            image: &neutron_api_image {get_param: DockerNeutronApiImage}
            privileged: false
            user: root
            volumes:
              - /var/log/containers/neutron:/var/log/neutron
              - /var/log/containers/httpd/neutron-api:/var/log/httpd
            command: ['/bin/bash', '-c', 'chown -R neutron:neutron /var/log/neutron']
        step_3:
          neutron_db_sync:
            image: *neutron_api_image
            net: host
            privileged: false
            detach: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/neutron/etc/my.cnf.d/tripleo.cnf:/etc/my.cnf.d/tripleo.cnf:ro
                  - /var/lib/config-data/neutron/etc/neutron:/etc/neutron:ro
                  - /var/lib/config-data/neutron/usr/share/neutron:/usr/share/neutron:ro
                  - /var/log/containers/neutron:/var/log/neutron
                  - /var/log/containers/httpd/neutron-api:/var/log/httpd
            command: ['/usr/bin/bootstrap_host_exec', 'neutron_api', 'neutron-db-manage', 'upgrade', 'heads']
            # FIXME: we should make config file permissions right
            # and run as neutron user
            #command: "/usr/bin/bootstrap_host_exec neutron_api su neutron -s /bin/bash -c 'neutron-db-manage upgrade heads'"
        step_4:
          map_merge:
            - neutron_api:
                image: *neutron_api_image
                net: host
                privileged: false
                restart: always
                volumes:
                  list_concat:
                    - {get_attr: [ContainersCommon, volumes]}
                    -
                      - /var/lib/kolla/config_files/neutron_api.json:/var/lib/kolla/config_files/config.json:ro
                      - /var/lib/config-data/puppet-generated/neutron/:/var/lib/kolla/config_files/src:ro
                      - /var/log/containers/neutron:/var/log/neutron
                      - /var/log/containers/httpd/neutron-api:/var/log/httpd
                environment:
                  - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
            - if:
                - internal_tls_enabled
                - neutron_server_tls_proxy:
                    image: *neutron_api_image
                    net: host
                    user: root
                    restart: always
                    volumes:
                      list_concat:
                        - {get_attr: [ContainersCommon, volumes]}
                        -
                          - /var/lib/kolla/config_files/neutron_server_tls_proxy.json:/var/lib/kolla/config_files/config.json:ro
                          - /var/lib/config-data/puppet-generated/neutron/:/var/lib/kolla/config_files/src:ro
                          - /etc/pki/tls/certs/httpd:/etc/pki/tls/certs/httpd:ro
                          - /etc/pki/tls/private/httpd:/etc/pki/tls/private/httpd:ro
                    environment:
                      - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
                - {}
      host_prep_tasks:
        - name: create persistent logs directory
          file:
            path: "{{ item }}"
            state: directory
          with_items:
            - /var/log/containers/neutron
            - /var/log/containers/httpd/neutron-api
      upgrade_tasks:
        - name: Check if neutron_server is deployed
          command: systemctl is-enabled neutron-server
          tags: common
          ignore_errors: True
          register: neutron_server_enabled
        - name: "PreUpgrade step0,validation: Check service neutron-server is running"
          shell: /usr/bin/systemctl show 'neutron-server' --property ActiveState | grep '\bactive\b'
          when: neutron_server_enabled.rc == 0
          tags: step0,validation
        - name: Stop and disable neutron_api service
          tags: step2
          when: neutron_server_enabled.rc == 0
          service: name=neutron-server state=stopped enabled=no
        - name: Remove openstack-neutron package if operator requests it
          yum: name=openstack-neutron state=removed
          tags: step2
          ignore_errors: True
          when: {get_param: UpgradeRemoveUnusedPackages}
      metadata_settings:
        get_attr: [NeutronBase, role_data, metadata_settings]
