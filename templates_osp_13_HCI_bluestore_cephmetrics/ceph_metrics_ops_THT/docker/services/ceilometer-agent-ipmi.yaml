heat_template_version: queens

description: >
  OpenStack containerized Ceilometer Agent Ipmi service

parameters:
  DockerCeilometerIpmiImage:
    description: image
    type: string
  DockerCeilometerConfigImage:
    description: The container image to use for the ceilometer config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean

resources:

  ContainersCommon:
   type: ./containers-common.yaml

  CeilometerAgentIpmiBase:
    type: ../../puppet/services/ceilometer-agent-ipmi.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Ceilometer Agent Ipmi role.
    value:
      service_name: {get_attr: [CeilometerAgentIpmiBase, role_data, service_name]}
      config_settings: {get_attr: [CeilometerAgentIpmiBase, role_data, config_settings]}
      logging_source: {get_attr: [CeilometerAgentIpmiBase, role_data, logging_source]}
      logging_groups: {get_attr: [CeilometerAgentIpmiBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [CeilometerAgentIpmiBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: ceilometer
        puppet_tags: ceilometer_config
        step_config:
          get_attr: [CeilometerAgentIpmiBase, role_data, step_config]
        config_image: {get_param: DockerCeilometerConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/ceilometer-agent-ipmi.json:
          command: /usr/bin/ceilometer-polling --polling-namespaces ipmi
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
      docker_config:
        step_3:
          ceilometer_init_log:
            start_order: 0
            image: &ceilometer_agent_ipmi_image {get_param: DockerCeilometerIpmiImage}
            user: root
            command: ['/bin/bash', '-c', 'chown -R ceilometer:ceilometer /var/log/ceilometer']
            volumes:
              - /var/log/containers/ceilometer:/var/log/ceilometer
        step_4:
          ceilometer_agent_ipmi:
            image: *ceilometer_agent_ipmi_image
            net: host
            privileged: false
            restart: always
            healthcheck:
              test: /openstack/healthcheck
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/ceilometer-agent-ipmi.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/ceilometer/:/var/lib/kolla/config_files/src:ro
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
        - name: create persistent logs directory
          file:
            path: /var/log/containers/ceilometer
            state: directory
        - name: ceilometer logs readme
          copy:
            dest: /var/log/ceilometer/readme.txt
            content: |
              Log files from ceilometer containers can be found under
              /var/log/containers/ceilometer.
          ignore_errors: true
      upgrade_tasks:
        - name: Check if ceilometer-agent-ipmi is deployed
          command: systemctl is-enabled --quiet openstack-ceilometer-ipmi
          tags: common
          ignore_errors: True
          register: ceilometer_ipmi_enabled
        - name: "PreUpgrade step0,validation: Check if openstack-ceilometer-ipmi is running"
          command: systemctl is-active --quiet openstack-ceilometer-ipmi
          when:
            - step|int == 0
            - ceilometer_ipmi_enabled.rc == 0
          tags: validation
        - name: Stop and disable ceilometer agent ipmi service
          service: name=openstack-ceilometer-agent-ipmi state=stopped enabled=no
          when:
            - step|int == 2
            - ceilometer_ipmi_enabled.rc == 0
        - name: Set fact for removal of openstack-ceilometer-ipmi package
          when: step|int == 2
          set_fact:
            remove_ceilometer_ipmi_package: {get_param: UpgradeRemoveUnusedPackages}
        - name: Remove openstack-ceilometer-ipmi package if operator requests it
          yum: name=openstack-ceilometer-ipmi state=removed
          ignore_errors: True
          when:
            - step|int == 2
            - remove_ceilometer_ipmi_package|bool
      fast_forward_upgrade_tasks:
        - name: FFU check if openstack-ceilometer-ipmi is enabled
          command: systemctl is-enabled openstack-ceilometer-ipmi
          ignore_errors: True
          register: ceilometer_ipmi_enabled_result
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Set fact ceilometer_ipmi_enabled
          set_fact:
            ceilometer_ipmi_enabled: "{{ ceilometer_ipmi_enabled_result.rc == 0 }}"
          when:
            - step|int == 0
            - release == 'ocata'
        - name: FFU stop and disable openstack-ceilometer-ipmi service
          when:
            - step|int == 1
            - release == 'ocata'
            - ceilometer_ipmi_enabled|bool
          service: name=openstack-ceilometer-ipmi state=stopped enabled=no
