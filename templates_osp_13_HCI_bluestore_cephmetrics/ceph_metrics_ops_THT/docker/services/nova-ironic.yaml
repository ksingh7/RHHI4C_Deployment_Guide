heat_template_version: queens

description: >
  OpenStack containerized Nova Ironic Compute service

parameters:
  DockerNovaComputeIronicImage:
    description: image
    type: string
  DockerNovaConfigImage:
    description: The container image to use for the nova config_volume
    type: string
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  NovaIronicBase:
    type: ../../puppet/services/nova-ironic.yaml
    properties:
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      EndpointMap: {get_param: EndpointMap}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Nova Compute service.
    value:
      service_name: {get_attr: [NovaIronicBase, role_data, service_name]}
      cellv2_discovery: true
      config_settings: {get_attr: [NovaIronicBase, role_data, config_settings]}
      logging_source: {get_attr: [NovaIronicBase, role_data, logging_source]}
      logging_groups: {get_attr: [NovaIronicBase, role_data, logging_groups]}
      puppet_config:
        config_volume: nova
        puppet_tags: nova_config,nova_paste_api_ini
        step_config:
          list_join:
            - "\n"
            - - {get_attr: [NovaIronicBase, role_data, step_config]}
              - {get_attr: [MySQLClient, role_data, step_config]}
        config_image: {get_param: DockerNovaConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/nova_ironic.json:
          command: /usr/bin/nova-compute
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
            - source: "/var/lib/kolla/config_files/src-iscsid/*"
              dest: "/etc/iscsi/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/nova
              owner: nova:nova
              recurse: true
            - path: /var/lib/nova
              owner: nova:nova
              recurse: true
      docker_config:
        step_5:
          nova_compute:
            image: {get_param: DockerNovaComputeIronicImage}
            net: host
            privileged: true
            user: root
            restart: always
            healthcheck:
              test: /openstack/healthcheck
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/nova_ironic.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/nova/:/var/lib/kolla/config_files/src:ro
                  - /etc/iscsi:/var/lib/kolla/config_files/src-iscsid:ro
                  - /run:/run
                  - /dev:/dev
                  - /var/lib/nova/:/var/lib/nova:shared
                  - /var/log/containers/nova:/var/log/nova
            environment:
             - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item }}"
            state: directory
          with_items:
            - /var/log/containers/nova
            - /var/lib/nova
        - name: nova logs readme
          copy:
            dest: /var/log/nova/readme.txt
            content: |
              Log files from nova containers can be found under
              /var/log/containers/nova and /var/log/containers/httpd/nova-*.
          ignore_errors: true
      upgrade_tasks:
        - name: Check if nova ironic is deployed
          command: systemctl is-enabled --quiet openstack-nova-compute
          tags: common
          ignore_errors: True
          register: nova_ironic_enabled
        - name: "PreUpgrade step0,validation: Check service openstack-nova-compute is running"
          command: systemctl is-active --quiet openstack-nova-compute
          tags: validation
          when:
            - step|int == 0
            - nova_ironic_enabled.rc == 0
        - name: Stop and disable nova-compute service
          when:
            - step|int == 2
            - nova_ironic_enabled.rc == 0
          service: name=openstack-nova-compute state=stopped enabled=no
      fast_forward_upgrade_tasks:
        - name: Check if nova ironic is deployed
          command: systemctl is-enabled --quiet openstack-nova-compute
          tags: common
          register: nova_ironic_enabled_result
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Set fact nova_ironic_enabled
          set_fact:
            nova_ironic_enabled: "{{ nova_ironic_enabled_result.rc == 0 }}"
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Stop and disable nova-compute service
          service: name=openstack-nova-compute state=stopped
          when:
            - step|int == 1
            - release == 'ocata'
            - nova_ironic_enabled|bool
