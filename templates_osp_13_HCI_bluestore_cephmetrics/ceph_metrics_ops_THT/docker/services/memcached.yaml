heat_template_version: queens

description: >
  OpenStack containerized Memcached services

parameters:
  DockerMemcachedImage:
    description: image
    type: string
  DockerMemcachedConfigImage:
    description: The container image to use for the memcached config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MemcachedBase:
    type: ../../puppet/services/memcached.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Memcached API role.
    value:
      service_name: {get_attr: [MemcachedBase, role_data, service_name]}
      config_settings: {get_attr: [MemcachedBase, role_data, config_settings]}
      logging_source: {get_attr: [MemcachedBase, role_data, logging_source]}
      logging_groups: {get_attr: [MemcachedBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [MemcachedBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: 'memcached'
        puppet_tags: 'file'
        step_config:
          get_attr: [MemcachedBase, role_data, step_config]
        config_image: {get_param: DockerMemcachedConfigImage}
      kolla_config: {}
      docker_config:
        step_1:
          memcached:
            start_order: 0
            image: {get_param: DockerMemcachedImage}
            net: host
            privileged: false
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/memcached/etc/sysconfig/memcached:/etc/sysconfig/memcached:ro
            command: ['/bin/bash', '-c', 'source /etc/sysconfig/memcached; /usr/bin/memcached -p ${PORT} -u ${USER} -m ${CACHESIZE} -c ${MAXCONN} $OPTIONS']
      host_prep_tasks:
        - name: memcached logs readme
          copy:
            dest: /var/log/memcached-readme.txt
            content: |
              Memcached container logs to stdout/stderr only.
          ignore_errors: true
      upgrade_tasks:
        - name: Check if memcached is deployed
          command: systemctl is-enabled --quiet memcached
          tags: common
          ignore_errors: True
          register: memcached_enabled
        - name: "PreUpgrade step0,validation: Check service memcached is running"
          command: systemctl is-active --quiet memcached
          when:
            - step|int == 0
            - memcached_enabled.rc == 0
          tags: validation
        - name: Stop and disable memcached service
          when:
            - step|int == 2
            - memcached_enabled.rc == 0
          service: name=memcached state=stopped enabled=no
      fast_forward_upgrade_tasks:
        - name: Check if memcached is deployed
          command: systemctl is-enabled --quiet memcached
          tags: common
          ignore_errors: True
          register: memcached_enabled_result
          when:
            - step|int == 0
            - release == 'ocata'
        - name: memcached_enabled
          set_fact:
            memcached_enabled: "{{ memcached_enabled_result.rc == 0 }}"
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Stop and disable memcached service
          when:
            - step|int == 2
            - release == 'ocata'
            - memcached_enabled|bool
          service: name=memcached state=stopped enabled=no
