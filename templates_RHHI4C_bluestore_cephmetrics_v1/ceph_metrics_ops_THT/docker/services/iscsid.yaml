heat_template_version: queens

description: >
  OpenStack containerized Iscsid service

parameters:
  DockerIscsidImage:
    description: image
    type: string
  DockerIscsidConfigImage:
    description: The container image to use for the iscsid config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  DefaultPasswords:
    default: {}
    type: json

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  IscsidBase:
    type: ../../puppet/services/iscsid.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Iscsid role.
    value:
      service_name: {get_attr: [IscsidBase, role_data, service_name]}
      config_settings: {get_attr: [IscsidBase, role_data, config_settings]}
      logging_source: {get_attr: [IscsidBase, role_data, logging_source]}
      logging_groups: {get_attr: [IscsidBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [IscsidBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: iscsid
        puppet_tags: iscsid_config
        step_config:
          {get_attr: [IscsidBase, role_data, step_config]}
        config_image: {get_param: DockerIscsidConfigImage}
        volumes:
          # NOTE(bogdando) Containerized or running on baremetal services
          # on a node must use the same iSCSI Qualified Name (IQN).
          # However, overcloud nodes must have a unique IQN. Allow full
          # (write) access to /etc/iscsi so that puppet ensures the IQN
          # is unique and is reset once, and only once.
          - /etc/iscsi:/etc/iscsi
      kolla_config:
        /var/lib/kolla/config_files/iscsid.json:
          command: /usr/sbin/iscsid -f
          config_files:
            - source: "/var/lib/kolla/config_files/src-iscsid/*"
              dest: "/etc/iscsi/"
              merge: true
              preserve_properties: true
      docker_config:
        step_3:
          iscsid:
            start_order: 2
            image: {get_param: DockerIscsidImage}
            net: host
            privileged: true
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/iscsid.json:/var/lib/kolla/config_files/config.json:ro
                  - /dev/:/dev/
                  - /run/:/run/
                  - /sys:/sys
                  - /lib/modules:/lib/modules:ro
                  - /etc/iscsi:/var/lib/kolla/config_files/src-iscsid:ro
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
        - name: stat /lib/systemd/system/iscsid.socket
          stat: path=/lib/systemd/system/iscsid.socket
          register: stat_iscsid_socket
        - name: Stop and disable iscsid.socket service
          service: name=iscsid.socket state=stopped enabled=no
          when: stat_iscsid_socket.stat.exists
      upgrade_tasks:
        - name: Check if iscsid service is deployed
          tags: common
          ignore_errors: True
          command: systemctl is-enabled --quiet iscsid
          register: iscsid_enabled
        - name: "PreUpgrade step0,validation: Check if iscsid is running"
          command: systemctl is-active --quiet iscsid
          when:
            - step|int == 0
            - iscsid_enabled.rc == 0
          tags: validation
        - name: Stop and disable iscsid service
          when:
            - step|int == 2
            - iscsid_enabled.rc == 0
          service: name=iscsid state=stopped enabled=no
        - name: Check if iscsid.socket service is deployed
          tags: common
          command: systemctl is-enabled --quiet iscsid.socket
          ignore_errors: True
          register: iscsid_socket_enabled
        - name: "PreUpgrade step0,validation: Check if iscsid.socket is running"
          command: systemctl is-active --quiet iscsid.socket
          when:
            - step|int == 0
            - iscsid_socket_enabled.rc == 0
          tags: validation
        - name: Stop and disable iscsid.socket service
          when:
            - step|int == 2
            - iscsid_socket_enabled.rc == 0
          service: name=iscsid.socket state=stopped enabled=no
