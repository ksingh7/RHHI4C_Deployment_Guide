heat_template_version: queens

description: >
  OpenStack Sahara service configured with Puppet

parameters:
  DockerSaharaEngineImage:
    description: image
    type: string
  DockerSaharaConfigImage:
    description: The container image to use for the sahara config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  SaharaEnginePuppetBase:
    type: ../../puppet/services/sahara-engine.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}

outputs:
  role_data:
    description: Role data for the Sahara Engine role.
    value:
      service_name: {get_attr: [SaharaEnginePuppetBase, role_data, service_name]}
      config_settings:
        map_merge:
          - get_attr: [SaharaEnginePuppetBase, role_data, config_settings]
          - sahara::sync_db: false
      logging_source: {get_attr: [SaharaEnginePuppetBase, role_data, logging_source]}
      logging_groups: {get_attr: [SaharaEnginePuppetBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [SaharaEnginePuppetBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS #
      puppet_config:
        config_volume: sahara
        puppet_tags: sahara_engine_paste_ini,sahara_cluster_template,sahara_config,sahara_node_group_template
        step_config:
          list_join:
            - "\n"
            - - {get_attr: [SaharaEnginePuppetBase, role_data, step_config]}
              - {get_attr: [MySQLClient, role_data, step_config]}
        config_image: {get_param: DockerSaharaConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/sahara-engine.json:
          command: /usr/bin/sahara-engine --config-file /etc/sahara/sahara.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/lib/sahara
              owner: sahara:sahara
              recurse: true
            - path: /var/log/sahara
              owner: sahara:sahara
              recurse: true
      docker_config:
        step_4:
          sahara_engine:
            image: {get_param: DockerSaharaEngineImage}
            net: host
            privileged: false
            restart: always
            healthcheck:
              test: /openstack/healthcheck
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/sahara-engine.json:/var/lib/kolla/config_files/config.json
                  - /var/lib/config-data/puppet-generated/sahara/:/var/lib/kolla/config_files/src:ro
                  - /var/lib/sahara:/var/lib/sahara
                  - /var/log/containers/sahara:/var/log/sahara
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
        - name: create /var/lib/sahara
          file:
            path: /var/lib/sahara
            state: directory
        - name: create persistent sahara logs directory
          file:
            path: /var/log/containers/sahara
            state: directory
        - name: sahara logs readme
          copy:
            dest: /var/log/sahara/readme.txt
            content: |
              Log files from sahara containers can be found under
              /var/log/containers/sahara.
          ignore_errors: true
      upgrade_tasks:
        - name: Check if sahara_engine is deployed
          command: systemctl is-enabled --quiet openstack-sahara-engine
          tags: common
          ignore_errors: True
          register: sahara_engine_enabled
        - name: "PreUpgrade step0,validation: Check service openstack-sahara-engine is running"
          command: systemctl is-active --quiet openstack-sahara-engine
          when:
            - step|int == 0
            - sahara_engine_enabled.rc == 0
          tags: validation
        - name: Stop and disable sahara_engine service
          when:
            - step|int == 2
            - sahara_engine_enabled.rc == 0
          service: name=openstack-sahara-engine state=stopped enabled=no
        - name: Set fact for removal of openstack-sahara-engine package
          when: step|int == 2
          set_fact:
            remove_sahara_engine_package: {get_param: UpgradeRemoveUnusedPackages}
        - name: Remove openstack-sahara-engine package if operator requests it
          yum: name=openstack-sahara-engine state=removed
          ignore_errors: True
          when:
            - step|int == 2
            - remove_sahara_engine_package|bool
