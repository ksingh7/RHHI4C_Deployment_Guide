heat_template_version: queens

description: >
  OpenStack containerized aodh service

parameters:
  DockerAodhApiImage:
    description: image
    type: string
  DockerAodhConfigImage:
    description: The container image to use for the aodh config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EnableInternalTLS:
    type: boolean
    default: false
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean

conditions:

  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  AodhApiPuppetBase:
      type: ../../puppet/services/aodh-api.yaml
      properties:
        EndpointMap: {get_param: EndpointMap}
        ServiceNetMap: {get_param: ServiceNetMap}
        DefaultPasswords: {get_param: DefaultPasswords}
        RoleName: {get_param: RoleName}
        RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the aodh API role.
    value:
      service_name: {get_attr: [AodhApiPuppetBase, role_data, service_name]}
      config_settings:
        map_merge:
          - get_attr: [AodhApiPuppetBase, role_data, config_settings]
          - apache::default_vhost: false
      logging_source: {get_attr: [AodhApiPuppetBase, role_data, logging_source]}
      logging_groups: {get_attr: [AodhApiPuppetBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [AodhApiPuppetBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: aodh
        puppet_tags: aodh_api_paste_ini,aodh_config
        step_config:
          list_join:
            - "\n"
            - - {get_attr: [AodhApiPuppetBase, role_data, step_config]}
              - {get_attr: [MySQLClient, role_data, step_config]}
        config_image: {get_param: DockerAodhConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/aodh_api.json:
          command: /usr/sbin/httpd -DFOREGROUND
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/aodh
              owner: aodh:aodh
              recurse: true
      docker_config:
        # db sync runs before permissions set by kolla_config
        step_2:
          aodh_init_log:
            image: &aodh_api_image {get_param: DockerAodhApiImage}
            user: root
            volumes:
              - /var/log/containers/aodh:/var/log/aodh
              - /var/log/containers/httpd/aodh-api:/var/log/httpd
            command: ['/bin/bash', '-c', 'chown -R aodh:aodh /var/log/aodh']
        step_3:
          aodh_db_sync:
            image: *aodh_api_image
            net: host
            privileged: false
            detach: false
            user: root
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/config-data/aodh/etc/my.cnf.d/tripleo.cnf:/etc/my.cnf.d/tripleo.cnf:ro
                  - /var/lib/config-data/aodh/etc/aodh/:/etc/aodh/:ro
                  - /var/log/containers/aodh:/var/log/aodh
                  - /var/log/containers/httpd/aodh-api:/var/log/httpd
            command: "/usr/bin/bootstrap_host_exec aodh_api su aodh -s /bin/bash -c /usr/bin/aodh-dbsync"
        step_4:
          aodh_api:
            image: *aodh_api_image
            net: host
            privileged: false
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                -
                  - /var/lib/kolla/config_files/aodh_api.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/aodh/:/var/lib/kolla/config_files/src:ro
                  - /var/log/containers/aodh:/var/log/aodh
                  - /var/log/containers/httpd/aodh-api:/var/log/httpd
                  -
                    if:
                      - internal_tls_enabled
                      - /etc/pki/tls/certs/httpd:/etc/pki/tls/certs/httpd:ro
                      - ''
                  -
                    if:
                      - internal_tls_enabled
                      - /etc/pki/tls/private/httpd:/etc/pki/tls/private/httpd:ro
                      - ''
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      host_prep_tasks:
      - name: create persistent logs directory
        file:
          path: "{{ item }}"
          state: directory
        with_items:
          - /var/log/containers/aodh
          - /var/log/containers/httpd/aodh-api
      - name: aodh logs readme
        copy:
          dest: /var/log/aodh/readme.txt
          content: |
            Log files from aodh containers can be found under
            /var/log/containers/aodh and /var/log/containers/httpd/aodh-api.
        ignore_errors: true
      upgrade_tasks:
        - name: Check for aodh api service running under apache
          tags: common
          shell: "httpd -t -D DUMP_VHOSTS | grep -q aodh"
          ignore_errors: True
          register: httpd_enabled
        - name: Check if httpd is running
          tags: common
          command: systemctl is-active --quiet httpd
          ignore_errors: True
          register: httpd_running
        - name: "PreUpgrade step0,validation: Check if aodh api is running"
          shell: systemctl status 'httpd' | grep -q aodh
          tags: validation
          when:
            - step|int == 0
            - httpd_enabled.rc == 0
            - httpd_running.rc == 0
        - name: Stop and disable aodh service (running under httpd)
          when:
            - step|int == 2
            - httpd_enabled.rc == 0
            - httpd_running.rc == 0
          service: name=httpd state=stopped enabled=no
        - name: Set fact for removal of openstack-aodh-api package
          when: step|int == 2
          set_fact:
            remove_aodh_api_package: {get_param: UpgradeRemoveUnusedPackages}
        - name: Remove openstack-aodh-api package if operator requests it
          yum: name=openstack-aodh-api state=removed
          ignore_errors: True
          when:
            - step|int == 2
            - remove_aodh_api_package|bool
      metadata_settings:
        get_attr: [AodhApiPuppetBase, role_data, metadata_settings]
      fast_forward_upgrade_tasks:
        - name: Check for aodh running under apache
          tags: common
          shell: "httpd -t -D DUMP_VHOSTS | grep -q aodh_wsgi"
          ignore_errors: true
          register: aodh_httpd_enabled_result
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Set fact aodh_httpd_enabled
          set_fact:
            aodh_httpd_enabled: "{{ aodh_httpd_enabled_result.rc == 0 }}"
          when:
            - step|int == 0
            - release == 'ocata'
        - name: Check if httpd is running
          ignore_errors: True
          command: systemctl is-active --quiet httpd
          register: httpd_running_result
          when:
            - step|int == 0
            - release == 'ocata'
            - httpd_running is undefined
        - name: Set fact httpd_running if undefined
          set_fact:
            httpd_running: "{{ httpd_running_result.rc == 0 }}"
          when:
            - step|int == 0
            - release == 'ocata'
            - httpd_running is undefined
        - name: Stop and disable aodh (under httpd)
          service: name=httpd state=stopped enabled=no
          when:
            - step|int == 1
            - release == 'ocata'
            - aodh_httpd_enabled|bool
            - httpd_running|bool
        - name: Aodh package update
          shell: yum -y update openstack-aodh*
          when:
            - step|int == 6
            - is_bootstrap_node|bool
            - aodh_httpd_enabled|bool
        - name: aodh db sync
          command: aodh-dbsync
          when:
            - step|int == 8
            - is_bootstrap_node|bool
            - aodh_httpd_enabled|bool
