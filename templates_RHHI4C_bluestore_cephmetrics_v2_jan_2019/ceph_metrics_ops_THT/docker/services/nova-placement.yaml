heat_template_version: queens

description: >
  OpenStack containerized Nova Placement API service

parameters:
  DockerNovaPlacementImage:
    description: image
    type: string
  DockerNovaPlacementConfigImage:
    description: The container image to use for the nova_placement config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EnableInternalTLS:
    type: boolean
    default: false
  UpgradeRemoveUnusedPackages:
    default: false
    description: Remove package if the service is being disabled during upgrade
    type: boolean

conditions:

  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}

resources:

  ContainersCommon:
    type: ./containers-common.yaml

  MySQLClient:
    type: ../../puppet/services/database/mysql-client.yaml

  NovaPlacementBase:
    type: ../../puppet/services/nova-placement.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

  NovaPlacementLogging:
    type: OS::TripleO::Services::Logging::NovaPlacement

outputs:
  role_data:
    description: Role data for the Nova Placement API role.
    value:
      service_name: {get_attr: [NovaPlacementBase, role_data, service_name]}
      config_settings:
        map_merge:
          - get_attr: [NovaPlacementBase, role_data, config_settings]
          - get_attr: [NovaPlacementLogging, config_settings]
          - apache::default_vhost: false
      logging_source: {get_attr: [NovaPlacementBase, role_data, logging_source]}
      logging_groups: {get_attr: [NovaPlacementBase, role_data, logging_groups]}
      service_config_settings: {get_attr: [NovaPlacementBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: nova_placement
        puppet_tags: nova_config
        step_config:
          list_join:
            - "\n"
            - - {get_attr: [NovaPlacementBase, role_data, step_config]}
              - {get_attr: [MySQLClient, role_data, step_config]}
        config_image: {get_param: DockerNovaPlacementConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/nova_placement.json:
          command: /usr/sbin/httpd -DFOREGROUND
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/log/nova
              owner: nova:nova
              recurse: true
      docker_config:
        step_2:
          get_attr: [NovaPlacementLogging, docker_config, step_2]
        # start this early so it is up before computes start reporting
        step_3:
          nova_placement:
            start_order: 1
            image: {get_param: DockerNovaPlacementImage}
            net: host
            user: root
            restart: always
            volumes:
              list_concat:
                - {get_attr: [ContainersCommon, volumes]}
                - get_attr: [NovaPlacementLogging, volumes]
                -
                  - /var/lib/kolla/config_files/nova_placement.json:/var/lib/kolla/config_files/config.json:ro
                  - /var/lib/config-data/puppet-generated/nova_placement/:/var/lib/kolla/config_files/src:ro
                  -
                    if:
                      - internal_tls_enabled
                      - /etc/pki/tls/certs/httpd:/etc/pki/tls/certs/httpd:ro
                      - ''
                  -
                    if:
                      - internal_tls_enabled
                      - /etc/pki/tls/private/httpd:/etc/pki/tls/private/httpd:ro
                      - ''
            environment:
              - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
      metadata_settings:
        get_attr: [NovaPlacementBase, role_data, metadata_settings]
      host_prep_tasks: {get_attr: [NovaPlacementLogging, host_prep_tasks]}
      upgrade_tasks:
        - name: Check for nova placement running under apache
          tags: common
          shell: "httpd -t -D DUMP_VHOSTS | grep -q placement_wsgi"
          ignore_errors: True
          register: httpd_enabled
        - name: Check if httpd is running
          tags: common
          command: systemctl is-active --quiet httpd
          ignore_errors: True
          register: httpd_running
        - name: "PreUpgrade step0,validation: Check if placement_wsgi is running"
          shell: systemctl status 'httpd' | grep -q placement_wsgi
          tags: validation
          when:
            - step|int == 0
            - httpd_enabled.rc == 0
            - httpd_running.rc == 0
        - name: Stop and disable nova_placement service (running under httpd)
          when:
            - step|int == 2
            - httpd_enabled.rc == 0
            - httpd_running.rc == 0
          service: name=httpd state=stopped enabled=no
        - name: Set fact for removal of httpd package
          when: step|int == 2
          set_fact:
            remove_httpd_package: {get_param: UpgradeRemoveUnusedPackages}
        - name: Remove httpd package if operator requests it
          yum: name=httpd state=removed
          ignore_errors: True
          when:
            - step|int == 2
            - remove_httpd_package|bool

