heat_template_version: pike

description: >
  OpenStack Nova base service. Shared for all Nova services.

parameters:
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  KeystoneRegion:
    type: string
    default: 'regionOne'
    description: Keystone region for endpoint
  NotificationDriver:
    type: string
    default: 'messagingv2'
    description: Driver or drivers to handle sending notifications.
    constraints:
      - allowed_values: [ 'messagingv2', 'noop' ]
  NovaPassword:
    description: The password for the nova service and db account
    type: string
    hidden: true
  NeutronPassword:
    description: The password for the neutron service and db account, used by neutron agents.
    type: string
    hidden: true
  NovaOVSBridge:
    default: 'br-int'
    description: Name of integration bridge used by Open vSwitch
    type: string
  RabbitPassword:
    description: The password for RabbitMQ
    type: string
    hidden: true
  RabbitUserName:
    default: guest
    description: The username for RabbitMQ
    type: string
  RabbitClientUseSSL:
    default: false
    description: >
        Rabbit client subscriber parameter to specify
        an SSL connection to the RabbitMQ host.
    type: string
  RabbitClientPort:
    default: 5672
    description: Set rabbit subscriber port, change this if using SSL
    type: number
  DatabaseSyncTimeout:
    default: 300
    description: DB Sync Timeout default
    type: number
  Debug:
    type: string
    default: ''
    description: Set to True to enable debugging on all services.
  NovaDebug:
    default: ''
    description: Set to True to enable debugging Nova services.
    type: string
  EnableConfigPurge:
    type: boolean
    default: false
    description: >
        Remove configuration that is not generated by TripleO. Used to avoid
        configuration remnants after upgrades.
  NovaIPv6:
    default: false
    description: Enable IPv6 features in Nova
    type: boolean
  UpgradeLevelNovaCompute:
    type: string
    description: Nova Compute upgrade level
    default: ''
  NovaCronArchiveDeleteRowsMinute:
    type: string
    description: >
        Cron to move deleted instances to another table - Minute
    default: '1'
  NovaCronArchiveDeleteRowsHour:
    type: string
    description: >
        Cron to move deleted instances to another table - Hour
    default: '0'
  NovaCronArchiveDeleteRowsMonthday:
    type: string
    description: >
        Cron to move deleted instances to another table - Month Day
    default: '*'
  NovaCronArchiveDeleteRowsMonth:
    type: string
    description: >
        Cron to move deleted instances to another table - Month
    default: '*'
  NovaCronArchiveDeleteRowsWeekday:
    type: string
    description: >
        Cron to move deleted instances to another table - Week Day
    default: '*'
  NovaCronArchiveDeleteRowsMaxRows:
    type: string
    description: >
        Cron to move deleted instances to another table - Max Rows
    default: '100'
  NovaCronArchiveDeleteRowsUser:
    type: string
    description: >
        Cron to move deleted instances to another table - User
    default: 'nova'
  NovaCronArchiveDeleteRowsDestination:
    type: string
    description: >
        Cron to move deleted instances to another table - Log destination
    default: '/var/log/nova/nova-rowsflush.log'
  NovaCronArchiveDeleteRowsUntilComplete:
    type: boolean
    description: >
        Cron to move deleted instances to another table - Until complete
    default: false
  NovaPlacementAPIInterface:
    type: string
    description: >
        Endpoint interface to be used for the placement API.
    default: 'internal'

conditions:

  compute_upgrade_level_empty: {equals : [{get_param: UpgradeLevelNovaCompute}, '']}
  service_debug_unset: {equals : [{get_param: NovaDebug}, '']}

outputs:
  role_data:
    description: Role data for the Nova base service.
    value:
      service_name: nova_base
      config_settings:
        map_merge:
        - nova::my_ip: {get_param: [ServiceNetMap, NovaApiNetwork]}
          nova::rabbit_password: {get_param: RabbitPassword}
          nova::rabbit_userid: {get_param: RabbitUserName}
          nova::rabbit_use_ssl: {get_param: RabbitClientUseSSL}
          nova::rabbit_port: {get_param: RabbitClientPort}
          nova::placement::project_name: 'service'
          nova::placement::password: {get_param: NovaPassword}
          nova::placement::auth_url: {get_param: [EndpointMap, KeystoneInternal, uri_no_suffix]}
          nova::placement::os_region_name: {get_param: KeystoneRegion}
          nova::placement::os_interface: {get_param: NovaPlacementAPIInterface}
          nova::database_connection:
            make_url:
              scheme: {get_param: [EndpointMap, MysqlInternal, protocol]}
              username: nova
              password: {get_param: NovaPassword}
              host: {get_param: [EndpointMap, MysqlInternal, host]}
              path: /nova
              query:
                read_default_file: /etc/my.cnf.d/tripleo.cnf
                read_default_group: tripleo
          nova::cell0_database_connection:
            make_url:
              scheme: {get_param: [EndpointMap, MysqlInternal, protocol]}
              username: nova
              password: {get_param: NovaPassword}
              host: {get_param: [EndpointMap, MysqlInternal, host]}
              path: /nova_cell0
              query:
                read_default_file: /etc/my.cnf.d/tripleo.cnf
                read_default_group: tripleo
          nova::api_database_connection:
            make_url:
              scheme: {get_param: [EndpointMap, MysqlInternal, protocol]}
              username: nova_api
              password: {get_param: NovaPassword}
              host: {get_param: [EndpointMap, MysqlInternal, host]}
              path: /nova_api
              query:
                read_default_file: /etc/my.cnf.d/tripleo.cnf
                read_default_group: tripleo
          nova::placement_database_connection:
            make_url:
              scheme: {get_param: [EndpointMap, MysqlInternal, protocol]}
              username: nova_placement
              password: {get_param: NovaPassword}
              host: {get_param: [EndpointMap, MysqlInternal, host]}
              path: /nova_placement
              query:
                read_default_file: /etc/my.cnf.d/tripleo.cnf
                read_default_group: tripleo
          nova::debug:
            if:
            - service_debug_unset
            - {get_param: Debug }
            - {get_param: NovaDebug }
          nova::purge_config: {get_param: EnableConfigPurge}
          nova::network::neutron::neutron_project_name: 'service'
          nova::network::neutron::neutron_username: 'neutron'
          nova::network::neutron::neutron_region_name: {get_param: KeystoneRegion}
          nova::network::neutron::dhcp_domain: ''
          nova::network::neutron::neutron_password: {get_param: NeutronPassword}
          nova::network::neutron::neutron_url: {get_param: [EndpointMap, NeutronInternal, uri]}
          nova::network::neutron::neutron_auth_url: {get_param: [EndpointMap, KeystoneV3Admin, uri]}
          nova::rabbit_heartbeat_timeout_threshold: 60
          nova::cinder_catalog_info: 'volumev2:cinderv2:internalURL'
          nova::host: '%{::fqdn}'
          nova::notify_on_state_change: 'vm_and_task_state'
          nova::notification_driver: {get_param: NotificationDriver}
          nova::network::neutron::neutron_auth_type: 'v3password'
          nova::db::database_db_max_retries: -1
          nova::db::database_max_retries: -1
          nova::db::sync::db_sync_timeout: {get_param: DatabaseSyncTimeout}
          nova::db::sync_api::db_sync_timeout: {get_param: DatabaseSyncTimeout}
          nova::glance_api_servers: {get_param: [EndpointMap, GlanceInternal, uri]}
          nova::use_ipv6: {get_param: NovaIPv6}
          nova::network::neutron::neutron_ovs_bridge: {get_param: NovaOVSBridge}
          nova::cron::archive_deleted_rows::minute: {get_param: NovaCronArchiveDeleteRowsMinute}
          nova::cron::archive_deleted_rows::hour: {get_param: NovaCronArchiveDeleteRowsHour}
          nova::cron::archive_deleted_rows::monthday: {get_param: NovaCronArchiveDeleteRowsMonthday}
          nova::cron::archive_deleted_rows::month: {get_param: NovaCronArchiveDeleteRowsMonth}
          nova::cron::archive_deleted_rows::weekday: {get_param: NovaCronArchiveDeleteRowsWeekday}
          nova::cron::archive_deleted_rows::max_rows: {get_param: NovaCronArchiveDeleteRowsMaxRows}
          nova::cron::archive_deleted_rows::user: {get_param: NovaCronArchiveDeleteRowsUser}
          nova::cron::archive_deleted_rows::destination: {get_param: NovaCronArchiveDeleteRowsDestination}
          nova::cron::archive_deleted_rows::until_complete: {get_param: NovaCronArchiveDeleteRowsUntilComplete}
        -
          if:
          - compute_upgrade_level_empty
          - {}
          - nova::upgrade_level_compute: {get_param: UpgradeLevelNovaCompute}
      service_config_settings:
        mysql:
          # NOTE(aschultz): this should be configurable if/when we support more
          # complex cell v2 configurations. For now, this is the default cell
          # created for the cell v2 configuration
          nova::db::mysql_api::setup_cell0: true
          nova::rabbit_password: {get_param: RabbitPassword}
          nova::rabbit_userid: {get_param: RabbitUserName}
          nova::rabbit_use_ssl: {get_param: RabbitClientUseSSL}
          nova::rabbit_port: {get_param: RabbitClientPort}
