heat_template_version: pike

description: >
  OpenStack containerized Redis services

parameters:
  DockerRedisImage:
    description: image
    type: string
  DockerRedisConfigImage:
    description: The container image to use for the redis config_volume
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json
  EnableInternalTLS:
    type: boolean
    default: false

conditions:

  internal_tls_enabled: {equals: [{get_param: EnableInternalTLS}, true]}

resources:

  ContainersCommon:
    type: ../../containers-common.yaml

  RedisBase:
    type: ../../../../puppet/services/database/redis.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}

outputs:
  role_data:
    description: Role data for the Redis API role.
    value:
      service_name: {get_attr: [RedisBase, role_data, service_name]}
      config_settings:
        map_merge:
          - {get_attr: [RedisBase, role_data, config_settings]}
          - redis::service_manage: false
            redis::notify_service: false
            redis::managed_by_cluster_manager: true
            tripleo::profile::pacemaker::database::redis_bundle::redis_docker_image: &redis_image_pcmklatest
              list_join:
                - ':'
                - - yaql:
                      data: {get_param: DockerRedisImage}
                      expression: $.data.rightSplit(separator => ":", maxSplits => 1)[0]
                  - 'pcmklatest'
            tripleo::profile::pacemaker::database::redis_bundle::control_port: 3124
            tripleo.redis.firewall_rules:
              '108 redis-bundle':
                dport:
                  - 3124
                  - 6379
                  - 26379
            tripleo::stunnel::manage_service: false
            tripleo::stunnel::foreground: 'yes'
      logging_source: {get_attr: [RedisBase, role_data, logging_source]}
      logging_groups: {get_attr: [RedisBase, role_data, logging_groups]}
      step_config: ""
      service_config_settings: {get_attr: [RedisBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: 'redis'
        # NOTE: we need the exec tag to copy /etc/redis.conf.puppet to
        # /etc/redis.conf
        # https://github.com/arioch/puppet-redis/commit/1c004143223e660cbd433422ff8194508aab9763
        puppet_tags: 'exec'
        step_config:
          get_attr: [RedisBase, role_data, step_config]
        config_image: &redis_config_image {get_param: DockerRedisConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/redis.json:
          command: /usr/sbin/pacemaker_remoted
          config_files:
            - dest: /etc/libqb/force-filesystem-sockets
              source: /dev/null
              owner: root
              perm: '0644'
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
              optional: true
          permissions:
            - path: /var/run/redis
              owner: redis:redis
              recurse: true
            - path: /var/lib/redis
              owner: redis:redis
              recurse: true
            - path: /var/log/redis
              owner: redis:redis
              recurse: true
        /var/lib/kolla/config_files/redis_tls_proxy.json:
          command: stunnel /etc/stunnel/stunnel.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
      docker_config:
        step_1:
          redis_image_tag:
            start_order: 1
            detach: false
            net: host
            user: root
            command:
              - '/bin/bash'
              - '-c'
              - str_replace:
                  template:
                    "/usr/bin/docker tag 'REDIS_IMAGE' 'REDIS_IMAGE_PCMKLATEST'"
                  params:
                    REDIS_IMAGE: {get_param: DockerRedisImage}
                    REDIS_IMAGE_PCMKLATEST: *redis_image_pcmklatest
            image: {get_param: DockerRedisImage}
            volumes:
              - /etc/hosts:/etc/hosts:ro
              - /etc/localtime:/etc/localtime:ro
              - /dev/shm:/dev/shm:rw
              - /etc/sysconfig/docker:/etc/sysconfig/docker:ro
              - /usr/bin:/usr/bin:ro
              - /var/run/docker.sock:/var/run/docker.sock:rw
        step_2:
          map_merge:
            - redis_init_bundle:
                start_order: 2
                detach: false
                net: host
                user: root
                config_volume: 'redis_init_bundle'
                command:
                  - '/bin/bash'
                  - '-c'
                  - str_replace:
                      template:
                        list_join:
                          - '; '
                          - - "cp -a /tmp/puppet-etc/* /etc/puppet; echo '{\"step\": 2}' > /etc/puppet/hieradata/docker.json"
                            - "FACTER_uuid=docker puppet apply --tags file,file_line,concat,augeas,TAGS -v -e 'CONFIG'"
                      params:
                        TAGS: 'pacemaker::resource::bundle,pacemaker::property,pacemaker::resource::ocf,pacemaker::constraint::order,pacemaker::constraint::colocation'
                        CONFIG: 'include ::tripleo::profile::base::pacemaker;include ::tripleo::profile::pacemaker::database::redis_bundle'
                image: *redis_config_image
                volumes:
                  - /etc/hosts:/etc/hosts:ro
                  - /etc/localtime:/etc/localtime:ro
                  - /etc/puppet:/tmp/puppet-etc:ro
                  - /usr/share/openstack-puppet/modules:/usr/share/openstack-puppet/modules:ro
                  - /etc/corosync/corosync.conf:/etc/corosync/corosync.conf:ro
                  - /dev/shm:/dev/shm:rw
            - if:
                - internal_tls_enabled
                - redis_tls_proxy:
                    start_order: 3
                    image: *redis_image_pcmklatest
                    net: host
                    user: root
                    restart: always
                    volumes:
                      list_concat:
                        - {get_attr: [ContainersCommon, volumes]}
                        -
                          - /var/lib/kolla/config_files/redis_tls_proxy.json:/var/lib/kolla/config_files/config.json:ro
                          - /var/lib/config-data/puppet-generated/redis/:/var/lib/kolla/config_files/src:ro
                          - /etc/pki/tls/certs/redis.crt:/etc/pki/tls/certs/redis.crt:ro
                          - /etc/pki/tls/private/redis.key:/etc/pki/tls/private/redis.key:ro
                    environment:
                      - KOLLA_CONFIG_STRATEGY=COPY_ALWAYS
                - {}
      metadata_settings:
        get_attr: [RedisBase, role_data, metadata_settings]
      host_prep_tasks:
        - name: create /var/run/redis
          file:
            path: /var/run/redis
            state: directory
        - name: create /var/log/redis
          file:
            path: /var/log/redis
            state: directory
        - name: create /var/lib/redis
          file:
            path: /var/lib/redis
            state: directory
      upgrade_tasks:
        - name: get bootstrap nodeid
          tags: common
          command: hiera -c /etc/puppet/hiera.yaml bootstrap_nodeid
          register: bootstrap_node
        - name: set is_bootstrap_node fact
          tags: common
          set_fact: is_bootstrap_node={{bootstrap_node.stdout|lower == ansible_hostname|lower}}
        - name: Check cluster resource status
          tags: step2
          pacemaker_resource:
            resource: {get_attr: [RedisBase, role_data, service_name]}
            state: master
            check_mode: true
          ignore_errors: true
          register: redis_res
        - name: Disable the redis cluster resource
          tags: step2
          pacemaker_resource:
            resource: {get_attr: [RedisBase, role_data, service_name]}
            state: disable
            wait_for_resource: true
          register: output
          retries: 5
          until: output.rc == 0
          when: is_bootstrap_node and redis_res|succeeded
        - name: Delete the stopped redis cluster resource.
          tags: step2
          pacemaker_resource:
            resource: {get_attr: [RedisBase, role_data, service_name]}
            state: delete
            wait_for_resource: true
          register: output
          retries: 5
          until: output.rc == 0
          when: is_bootstrap_node and redis_res|succeeded
        - name: Disable redis service
          tags: step2
          service: name=redis enabled=no
      update_tasks:
        - name: Get docker Redis image
          set_fact:
            docker_image: {get_param: DockerRedisImage}
            docker_image_latest: *redis_image_pcmklatest
          when: step == '2'
        - name: Get previous Redis image id
          shell: "docker images | awk '/redis.* pcmklatest/{print $3}'"
          register: redis_image_id
        - block:
            - name: Get a list of container using Redis image
              shell: "docker ps -q -f 'ancestor={{redis_image_id.stdout}}'"
              register: redis_containers_to_destroy
            # It will be recreated with the delpoy step.
            - name: Remove any container using the same Redis image
              shell: "docker rm -fv {{item}}"
              with_items: "{{ redis_containers_to_destroy.stdout_lines }}"
            - name: Remove previous Redis images
              shell: "docker rmi -f {{redis_image_id.stdout}}"
          when:
            - step == '2'
            - redis_image_id.stdout != ''
        - name: Pull latest Redis images
          command: "docker pull {{docker_image}}"
          when: step == "2"
        - name: Retag pcmklatest to latest Redis image
          shell: "docker tag {{docker_image}} {{docker_image_latest}}"
          when: step == "2"
        # Got to check that pacemaker_is_active is working fine with bundle.
        # TODO: pacemaker_is_active resource doesn't support bundle.
