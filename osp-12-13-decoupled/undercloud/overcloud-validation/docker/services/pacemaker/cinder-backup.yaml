heat_template_version: pike

description: >
  OpenStack containerized Cinder Backup service

parameters:
  DockerCinderBackupImage:
    description: image
    type: string
  DockerCinderConfigImage:
    description: The container image to use for the cinder config_volume
    type: string
  CinderBackupBackend:
    default: swift
    description: The short name of the Cinder Backup backend to use.
    type: string
    constraints:
    - allowed_values: ['swift', 'ceph']
  CinderBackupRbdPoolName:
    default: backups
    type: string
  CephClientUserName:
    default: openstack
    type: string
  EndpointMap:
    default: {}
    description: Mapping of service endpoint -> protocol. Typically set
                 via parameter_defaults in the resource registry.
    type: json
  ServiceData:
    default: {}
    description: Dictionary packing service data
    type: json
  ServiceNetMap:
    default: {}
    description: Mapping of service_name -> network name. Typically set
                 via parameter_defaults in the resource registry.  This
                 mapping overrides those in ServiceNetMapDefaults.
    type: json
  DefaultPasswords:
    default: {}
    type: json
  RoleName:
    default: ''
    description: Role name on which the service is applied
    type: string
  RoleParameters:
    default: {}
    description: Parameters specific to the role
    type: json


resources:

  MySQLClient:
    type: ../../../puppet/services/database/mysql-client.yaml

  CinderBackupBase:
    type: ../../../puppet/services/cinder-backup.yaml
    properties:
      EndpointMap: {get_param: EndpointMap}
      ServiceData: {get_param: ServiceData}
      ServiceNetMap: {get_param: ServiceNetMap}
      DefaultPasswords: {get_param: DefaultPasswords}
      RoleName: {get_param: RoleName}
      RoleParameters: {get_param: RoleParameters}
      CinderBackupBackend: {get_param: CinderBackupBackend}
      CinderBackupRbdPoolName: {get_param: CinderBackupRbdPoolName}
      CephClientUserName: {get_param: CephClientUserName}

outputs:
  role_data:
    description: Role data for the Cinder Backup role.
    value:
      service_name: {get_attr: [CinderBackupBase, role_data, service_name]}
      config_settings:
        map_merge:
          - get_attr: [CinderBackupBase, role_data, config_settings]
          - tripleo::profile::pacemaker::cinder::backup_bundle::cinder_backup_docker_image: &cinder_backup_image_pcmklatest
              list_join:
                - ':'
                - - yaql:
                      data: {get_param: DockerCinderBackupImage}
                      expression: $.data.rightSplit(separator => ":", maxSplits => 1)[0]
                  - 'pcmklatest'
            cinder::backup::manage_service: false
            cinder::backup::enabled: false
      logging_source: {get_attr: [CinderBackupBase, role_data, logging_source]}
      logging_groups: {get_attr: [CinderBackupBase, role_data, logging_groups]}
      step_config: &step_config
        list_join:
          - "\n"
          - - {get_attr: [CinderBackupBase, role_data, step_config]}
            - {get_attr: [MySQLClient, role_data, step_config]}
      service_config_settings: {get_attr: [CinderBackupBase, role_data, service_config_settings]}
      # BEGIN DOCKER SETTINGS
      puppet_config:
        config_volume: cinder
        puppet_tags: cinder_config,file,concat,file_line
        step_config: *step_config
        config_image: {get_param: DockerCinderConfigImage}
      kolla_config:
        /var/lib/kolla/config_files/cinder_backup.json:
          command: /usr/bin/cinder-backup --config-file /usr/share/cinder/cinder-dist.conf --config-file /etc/cinder/cinder.conf
          config_files:
            - source: "/var/lib/kolla/config_files/src/*"
              dest: "/"
              merge: true
              preserve_properties: true
            - source: "/var/lib/kolla/config_files/src-ceph/"
              dest: "/etc/ceph/"
              merge: true
              preserve_properties: true
            - source: "/var/lib/kolla/config_files/src-iscsid/*"
              dest: "/"
              merge: true
              preserve_properties: true
          permissions:
            - path: /var/lib/cinder
              owner: cinder:cinder
              recurse: true
            - path: /var/log/cinder
              owner: cinder:cinder
              recurse: true
      docker_config:
        step_1:
          cinder_backup_image_tag:
            start_order: 1
            detach: false
            net: host
            user: root
            command:
              - '/bin/bash'
              - '-c'
              - str_replace:
                  template:
                    "/usr/bin/docker tag 'CINDERBACKUP_IMAGE' 'CINDERBACKUP_IMAGE_PCMKLATEST'"
                  params:
                    CINDERBACKUP_IMAGE: {get_param: DockerCinderBackupImage}
                    CINDERBACKUP_IMAGE_PCMKLATEST: *cinder_backup_image_pcmklatest
            image: {get_param: DockerCinderBackupImage}
            volumes:
              - /etc/hosts:/etc/hosts:ro
              - /etc/localtime:/etc/localtime:ro
              - /dev/shm:/dev/shm:rw
              - /etc/sysconfig/docker:/etc/sysconfig/docker:ro
              - /usr/bin:/usr/bin:ro
              - /var/run/docker.sock:/var/run/docker.sock:rw
        step_3:
          cinder_backup_init_logs:
            start_order: 0
            image: {get_param: DockerCinderBackupImage}
            privileged: false
            user: root
            volumes:
              - /var/log/containers/cinder:/var/log/cinder
            command: ['/bin/bash', '-c', 'chown -R cinder:cinder /var/log/cinder']
        step_5:
          cinder_backup_init_bundle:
            start_order: 1
            detach: false
            net: host
            user: root
            command:
              - '/bin/bash'
              - '-c'
              - str_replace:
                  template:
                    list_join:
                      - '; '
                      - - "cp -a /tmp/puppet-etc/* /etc/puppet; echo '{\"step\": 5}' > /etc/puppet/hieradata/docker.json"
                        - "FACTER_uuid=docker puppet apply --tags file_line,concat,augeas,TAGS --debug -v -e 'CONFIG'"
                  params:
                    TAGS: 'pacemaker::resource::bundle,pacemaker::property,pacemaker::constraint::location'
                    CONFIG: 'include ::tripleo::profile::base::pacemaker;include ::tripleo::profile::pacemaker::cinder::backup_bundle'
            image: {get_param: DockerCinderBackupImage}
            volumes:
              - /etc/hosts:/etc/hosts:ro
              - /etc/localtime:/etc/localtime:ro
              - /etc/puppet:/tmp/puppet-etc:ro
              - /usr/share/openstack-puppet/modules:/usr/share/openstack-puppet/modules:ro
              - /etc/corosync/corosync.conf:/etc/corosync/corosync.conf:ro
              - /dev/shm:/dev/shm:rw
      host_prep_tasks:
        - name: create persistent directories
          file:
            path: "{{ item }}"
            state: directory
          with_items:
            - /var/lib/cinder
            - /var/log/containers/cinder
        - name: ensure ceph configurations exist
          file:
            path: /etc/ceph
            state: directory
      upgrade_tasks:
        - name: get bootstrap nodeid
          tags: common
          command: hiera -c /etc/puppet/hiera.yaml bootstrap_nodeid
          register: bootstrap_node
        - name: set is_bootstrap_node fact
          tags: common
          set_fact: is_bootstrap_node={{bootstrap_node.stdout|lower == ansible_hostname|lower}}
        - name: Disable the openstack-cinder-backup cluster resource
          tags: step2
          pacemaker_resource:
            resource: openstack-cinder-backup
            state: disable
            wait_for_resource: true
          register: output
          retries: 5
          until: output.rc == 0
          when: is_bootstrap_node
        - name: Delete the stopped openstack-cinder-backup cluster resource.
          tags: step2
          pacemaker_resource:
            resource: openstack-cinder-backup
            state: delete
            wait_for_resource: true
          register: output
          retries: 5
          until: output.rc == 0
          when: is_bootstrap_node
        - name: Disable cinder_backup service
          tags: step2
          service: name=openstack-cinder-backup enabled=no
      update_tasks:
        - name: Get docker Cinder-Backup image
          set_fact:
            docker_image: {get_param: DockerCinderBackupImage}
            docker_image_latest: *cinder_backup_image_pcmklatest
          when: step == '2'
        - name: Pull latest Cinder-Backup images
          command: "docker pull {{docker_image}}"
          when: step == "2"
        - name: Get previous Cinder-Backup image id
          shell: "docker images | awk '/cinder-backup.* pcmklatest/{print $3}'"
          register: cinder_backup_image_id
        - block:
            - name: Get a list of container using Cinder-Backup image
              shell: "docker ps -q -f 'ancestor={{cinder_backup_image_id.stdout}}'"
              register: cinder_backup_containers_to_destroy
            # It will be recreated with the delpoy step.
            - name: Remove any container using the same Cinder-Backup image
              shell: "docker rm -fv {{item}}"
              with_items: "{{ cinder_backup_containers_to_destroy.stdout_lines }}"
            - name: Remove previous Cinder-Backup images
              shell: "docker rmi -f {{cinder_backup_image_id.stdout}}"
          when:
            - step == '2'
            - cinder_backup_image_id.stdout != ''
        - name: Retag pcmklatest to latest Cinder-Backup image
          shell: "docker tag {{docker_image}} {{docker_image_latest}}"
          when: step == "2"
        # Got to check that pacemaker_is_active is working fine with bundle.
        # TODO: pacemaker_is_active resource doesn't support bundle.
